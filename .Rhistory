134.51795907393205, 132.15069964832028, 129.87298379728173,
127.67945582135243, 125.56516800159949, 123.52554526970661,
121.55635327878457)
e_rectale_exponential_growth_sfs = c(13899.996431678055, 6353.444969340434, 3992.0677019329937,
2871.7683654072566, 2228.6230735373733, 1815.5865424106712,
1529.7726141895234, 1321.1147352166267, 1162.5030303768206,
1038.0615524337109, 937.9162140360654, 855.6248118816548,
786.8168957737314, 728.4295011516406, 678.2560195157811,
634.6686838122158, 596.4417476515282, 562.6353550861675,
532.5172266801327, 505.50860352512603, 481.1461557927298,
459.0546398662335, 438.92694137485114, 420.5092875978355,
403.590138656902, 387.9917367432533, 373.5636027034813,
360.177477641741, 347.72334947772146, 336.1063030448768,
325.24400166174854, 315.0646574922432, 305.5053836001466,
296.5108465380473, 288.03215740894586, 280.0259535393627,
272.4536335590952, 265.2807167485965, 258.4763036695705,
252.01261982717958, 245.8646277777083, 240.00969595433511,
234.4273147279693, 229.09885199243368, 224.00734197210588,
219.13730207540294, 214.47457352183585, 210.0061822004684,
205.72021681037145, 201.60572181662883, 197.65260315142532,
193.8515449151298, 190.19393560151016, 186.6718025939541,
183.27775386564252, 180.00492597167622, 176.84693755132253,
173.7978476682857, 170.85211840933118, 168.00458123994113,
165.2504066824422, 162.5850769386367, 160.00436112772874,
157.50429285165)
e_rectale_three_epoch_sfs = c(13727.300763455209, 6647.9507723616725, 4296.747500048827,
3127.328529682447, 2430.4252504086444, 1969.6202029128249,
1643.5961641888246, 1401.6983920769544, 1215.7887080466246,
1068.9871320661337, 950.5544455846207, 853.3334745589793,
772.3713201753327, 704.1320633962994, 646.0243888606832,
596.1063508984383, 552.8943407709676, 515.2357324200783,
482.22174620579796, 453.12645432128295, 427.3632139777877,
404.4529831464236, 384.0009024133817, 365.6787319865046,
349.211504399496, 334.36725790717435, 320.94905186372085,
308.7886935783354, 297.741763523968, 287.68363594073026,
278.50627005946865, 270.11560336396843, 262.42941917913026,
255.3755909222427, 248.8906276779462, 242.9184624992994,
237.40943750747542, 232.31944953148448, 227.60922746729452,
223.24371829966887, 219.1915632292434, 215.42464888203554,
211.91772137384567, 208.6480532247656, 205.59515489853212,
202.74052417114714, 200.0674276906355, 197.56071002910872,
195.20662629586406, 192.9926950091143, 190.90756844203455,
188.94091808739086, 187.08333324046404, 185.3262309965492,
183.66177620701325, 182.08281014611723, 180.58278681585148,
179.15571596415555, 177.7961120172634, 176.49894823349277,
175.2596154768023, 174.0738850860089, 172.93787538222782,
171.8480214141912)
e_rectale_two_epoch_sfs = c(13598.157855930793, 6656.060795403004, 4345.6793682455855,
3193.1454847319656, 2503.6844034596256, 2045.7058691346215,
1719.9580624524317, 1476.8160593035723, 1288.7113165409774,
1139.103466350169, 1017.4674956739983, 916.7873361022373,
832.2062585967899, 760.2556706360725, 698.3923946488117,
644.7094671720946, 597.7490090222755, 556.3774721945791,
519.7002825902464, 487.00209003000134, 457.70408979087784,
431.3329838166027, 407.49803909138944, 385.87388150316275,
366.18741925847553, 348.2077840455408, 331.7385075655556,
316.6113745892098, 302.6815478592423, 289.8236680740006,
277.9287087718531, 266.9014209810032, 256.6582425323816,
247.125576369028, 238.23836405186546, 229.93889706221168,
222.17582091159042, 214.90329654135718, 208.08029077995036,
201.66997327220938, 195.6392017020466, 189.95808059249035,
184.5995817047903, 179.5392162364046, 174.75475075970505,
170.22596024483107, 165.93441264305721, 161.8632804277505,
157.99717524136636, 154.32200241328843, 150.8248326207708,
147.49378838489434, 144.31794344183368, 141.2872333200574,
138.39237569696854, 135.62479931217607, 132.97658038629606,
130.4403856391567, 128.00942112407878, 125.67738619944778,
123.43843204773485, 121.28712422829533, 119.2184088154978,
117.22758172970471)
e_rectale_x_axis = 1:length(e_rectale_empirical_syn_sfs)
e_rectale_bottleneck_growth_sfs = e_rectale_bottleneck_growth_sfs[1:length(e_rectale_x_axis)]
e_rectale_exponential_growth_sfs = e_rectale_exponential_growth_sfs[1:length(e_rectale_x_axis)]
e_rectale_two_epoch_sfs = e_rectale_two_epoch_sfs[1:length(e_rectale_x_axis)]
e_rectale_three_epoch_sfs = e_rectale_three_epoch_sfs[1:length(e_rectale_x_axis)]
df = data.frame(e_rectale_empirical_syn_sfs, e_rectale_bottleneck_growth_sfs, e_rectale_exponential_growth_sfs, e_rectale_two_epoch_sfs, e_rectale_three_epoch_sfs)
p_e_rectale <- ggplot(data = df, aes(x=e_rectale_x_axis, y=e_rectale_empirical_syn_sfs, color='e_rectale_empirical')) +
geom_point(shape=1) +
geom_line() +
geom_point(shape=1, aes(x=e_rectale_x_axis, y=e_rectale_bottleneck_growth_sfs, color='e_rectale_bottleneck')) +
geom_line(aes(x=e_rectale_x_axis, y=e_rectale_bottleneck_growth_sfs, color='e_rectale_bottleneck')) +
geom_point(shape=1, aes(x=e_rectale_x_axis, y=e_rectale_bottleneck_growth_sfs, color='e_rectale_exponential')) +
geom_line(aes(x=e_rectale_x_axis, y=e_rectale_exponential_growth_sfs, color='e_rectale_exponential')) +
geom_point(shape=1, aes(x=e_rectale_x_axis, y=e_rectale_two_epoch_sfs, color='e_rectale_two_epoch')) +
geom_line(aes(x=e_rectale_x_axis, y=e_rectale_two_epoch_sfs, color='e_rectale_two_epoch')) +
geom_point(shape=1, aes(x=e_rectale_x_axis, y=e_rectale_three_epoch_sfs, color='e_rectale_three_epoch')) +
geom_line(aes(x=e_rectale_x_axis, y=e_rectale_three_epoch_sfs, color='e_rectale_three_epoch')) +
scale_x_continuous(name='Frequency in Sample', breaks=e_rectale_x_axis, limits = c(1, length(e_rectale_x_axis))) +
scale_y_continuous(name='Number of SNPs') +
scale_color_manual(values=c('black', 'blue', 'orange', 'red', 'green'),
name='Data Type',
breaks=c('e_rectale_empirical',
'e_rectale_bottleneck',
'e_rectale_exponential',
'e_rectale_two_epoch',
'e_rectale_three_epoch'),
labels=c('Empirical',
'Bottleneck + Growth',
'Exponential',
'Two Epoch',
'Three Epoch')) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('E. rectale, Empirical vs. Expected SFS.')
p_e_rectale
f_x_y <- function(x, y) {
return(9 - 6 * x + x ^ 2 + 100 * y ^ 2 + 200 * x ^ 2 + 100 * x ^ 4)
}
f_x_y(0, 0)
f_x_y <- function(x, y) {
return(9 - 6 * x + x ^ 2 + 100 * y ^ 2 + 200 * x ^ 2 * y + 100 * x ^ 4)
}
f_partial_x <- function(x, y) {
return(-6 + 2 * x + 400 * x * y + 400 * x ^ 3)
}
f_partial_x <- function(x, y) {
return(-6 + 2 * x + 400 * x * y + 400 * x ^ 3)
}
f_partial_y <- function(x, y) {
return(200 * y + 200 * x ^ 2)
}
f_x_y <- function(x, y) {
return(9 - 6 * x + x ^ 2 + 100 * y ^ 2 + 200 * x ^ 2 * y + 100 * x ^ 4)
}
step = 10e-5
step = 10 ^ -5
f_x_y <- function(x, y) {
return(9 - 6 * x + x ^ 2 + 100 * y ^ 2 + 200 * x ^ 2 * y + 100 * x ^ 4)
}
f_partial_x <- function(x, y) {
return(-6 + 2 * x + 400 * x * y + 400 * x ^ 3)
}
f_partial_y <- function(x, y) {
return(200 * y + 200 * x ^ 2)
}
step = 10 ^ -5
init_x = 2
init_y = 2
step = 10 ^ -5
init_x = 2
init_y = 2
diff = 100
step = 10 ^ -5
diff = 100
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x + step * x_partial
next_y = prev_y + step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
next_x
prev_x
step
f_x_y(2, 2)
f_x_y(next_x, next_y)
y_partial
diff = 0
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x + step * x_partial
next_y = prev_y + step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
diff = 1
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x + step * x_partial
next_y = prev_y + step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
x_partial
y_partial
diff = 1
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x + step * x_partial
next_y = prev_y + step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
diff = 1
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
diff = 10
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
step = 10 ^ -1
diff = 10
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
step = 10 ^ -2
diff = 10
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
f_x_y(prev_x, prev_y)
}
print(f_x_y(prev_x, prev_y))
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
print(f_x_y(prev_x, prev_y))
}
diff = 10
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
print(f_x_y(prev_x, prev_y))
}
step = 10 ^ -3
diff = 10
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
print(f_x_y(prev_x, prev_y))
}
step = 10 ^ -4
diff = 10
prev_x = 2
prev_y = 2
iter = 0
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
print(f_x_y(prev_x, prev_y))
}
f_partial_x(prev_x, prev_y)
f_partial_y(prev_x, prev_y)
prev_x = 2
prev_y = 2
f_partial_x(prev_x, prev_y)
f_partial_y(prev_x, prev_y)
f_partial_x(prev_x, prev_y)
f_partial_y(prev_x, prev_y)
step = 10 ^ -3
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
step = 10 ^ -3
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
step = 10 ^ -4
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
step = 10 ^ -3
step = 10 ^ -3
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
iter_10_3 = iter
f_10_3 = f_x_y(prev_x, prev_y)
step = 10 ^ -3
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
iter_10_3 = iter
f_10_3 = f_x_y(prev_x, prev_y)
iter_10_3
f_10_3
step = 10 ^ -4
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
step = 10 ^ -4
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
prev_x = 2
prev_y = 2
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
iter_10_4 = iter
f_10_4 = f_x_y(prev_x, prev_y)
iter_10_4
f_10_4
step = 10 ^ -5
diff = 100000 # Some large diff to start our while loop
iter = 0 # keep track of number of iterations
prev_x = 2
prev_y = 2
while (diff > 10 ^ -8) {
iter = iter + 1
x_partial = f_partial_x(prev_x, prev_y)
y_partial = f_partial_y(prev_x, prev_y)
next_x = prev_x - step * x_partial
next_y = prev_y - step * y_partial
diff = f_x_y(prev_x, prev_y) - f_x_y(next_x, next_y)
prev_x = next_x
prev_y = next_y
}
iter_10_5 = iter
f_10_5 = f_x_y(prev_x, prev_y)
iter_10_5
f_10_5
devtools::install_github('satijalab/seurat-data')
install.packages(devtools)
install.packages(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('satijalab/seurat-data')
install.packages('devtools')
devtools::install_github('satijalab/seurat-data')
library(devtools)
devtools::install_github('satijalab/seurat-data')
install.packages('purrr')
library(devtools)
devtools::install_github('satijalab/seurat-data')
install.packages('glue')
install.packages("glue")
install.packages('devtools')
install.packages("devtools")
library(ggfortify)
install.packages(ggfortify)
install.packages('ggfortify')
library(ggfortify)
df <- iris[1:4]
df
iris
df
pca_res <- prcomp(df, scale =. = True)
TRUE
pca_res <- prcomp(df, scale =. = TRUE)
pca_res <- prcomp(df, scale = TRUE)
pca_res
autoplot(pca_res)
pca_res
library(ggfortify)
install.packages('glue')
library(ggfortify)
autoplot(pca_res)
iris[1:4]
setwd("C:/Users/jonat/Desktop/GitHub/demo_for_ccgb")
data = read.csv('./Data/example_output/snp_matrix.csv')
data
pca = prcomp(data, scale = TRUE)
pac
pca
autoplot(pca)
pca_res
autoplot(pca_res)
iris
library(ggfortify)
setwd("C:/Users/jonat/Desktop/GitHub/demo_for_ccgb")
# Phascolarctobacterium_succinatutens
data = read.csv('./Data/example_output/snp_matrix.csv')
pca = prcomp(data, scale = TRUE)
autoplot(pca)
