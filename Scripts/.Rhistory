x_axis = 1:length(core_syn)
input_df = data.frame(proportional_sfs(core_syn),
proportional_sfs(core_nonsyn),
proportional_sfs(accessory_syn),
proportional_sfs(accessory_nonsyn),
x_axis)
names(input_df) = c('Core genes (Syn)',
'Core genes (Nonsyn)',
'Accessory genes (Syn)',
'Accessory genes (Nonsyn)',
'x_axis')
p_input_comparison <- ggplot(data = melt(input_df, id='x_axis'),
aes(x=x_axis,
y=value,
fill=variable)) +
geom_bar(position='dodge2', stat='identity') +
labs(x = "", fill = "") +
scale_x_continuous(name='Minor allele frequency in Sample', breaks=x_axis, limits=c(0.5, length(x_axis) + 0.5)) +
ylab('Proportion of segregating sites') +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
scale_fill_manual(values=c("blue4", "steelblue3", "goldenrod3", "goldenrod1"))
return(p_input_comparison)
}
compare_core_sfs = function(all, core) {
x_axis = 1:length(all)
input_df = data.frame(proportional_sfs(all),
proportional_sfs(core),
x_axis)
names(input_df) = c('All genes',
'Core genes',
'x_axis')
p_input_comparison <- ggplot(data = melt(input_df, id='x_axis'),
aes(x=x_axis,
y=value,
fill=variable)) +
geom_bar(position='dodge2', stat='identity') +
labs(x = "", fill = "") +
scale_x_continuous(name='Minor allele frequency in Sample', breaks=x_axis, limits=c(0.5, length(x_axis) + 0.5)) +
ylab('Proportion of segregating sites') +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
## scale_fill_manual(values=c("darkslateblue", "darkslategrey", "darkturquoise"))
return(p_input_comparison)
}
extract_array_length <- function(input_string) {
array_string <- str_extract(input_string, "\\[(.*?)\\]")
num_elements <- length(strsplit(array_string, "[ ,]")[[1]])
return(num_elements)
}
AIC_from_demography = function(input_file) {
## Reads input SFS from output *demography.txt
if(grepl("one_epoch", input_file)) {
k=2
} else if(grepl("two_epoch", input_file)) {
k=4
} else {
k=8
}
this_file = file(input_file)
on.exit(close(this_file))
ll_string = readLines(this_file)[2]
loglik <- as.numeric(str_extract(ll_string, "-?\\d+\\.\\d+"))
return(k - 2*loglik)
}
return_nu_high = function(input) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
MLE = max(species_surface$likelihood)
# Task 1: Remove rows with likelihood less than MLE - 3
species_surface <- species_surface[species_surface$likelihood >= MLE - 3, ]
# Task 2: Get the highest nu value from the remaining rows
highest_nu <- max(species_surface$nu)
return(highest_nu)
}
return_nu_low = function(input) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
MLE = max(species_surface$likelihood)
# Task 1: Remove rows with likelihood less than MLE - 3
species_surface <- species_surface[species_surface$likelihood >= MLE - 3, ]
# Task 2: Get the highest nu value from the remaining rows
lowest_nu <- min(species_surface$nu)
return(lowest_nu)
}
return_nu_mle = function(input) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
species_surface = species_surface[order(species_surface$likelihood, decreasing=TRUE), ]
return(species_surface$nu[1])
}
return_time_high = function(input, sfs_file, theta_file) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
MLE = max(species_surface$likelihood)
# Task 1: Remove rows with likelihood less than MLE - 3
species_surface <- species_surface[species_surface$likelihood >= MLE - 3, ]
# Task 2: Get the highest nu value from the remaining rows
highest_tau <- max(species_surface$tau)
# Read the contents of the file into a variable
sfs_lines <- readLines(sfs_file)
# Extract the second line and split it into individual values
sfs_line <- sfs_lines[2]
sfs_vector <- as.numeric(unlist(strsplit(sfs_line, " ")))
allele_sum = sum(sfs_vector)
# Read the contents of the file into a variable
theta_lines <- readLines(theta_file)
# Extract the fifth line
theta_line <- theta_lines[5]
theta <- as.numeric(regmatches(theta_line, regexpr("\\d+\\.\\d+", theta_line)))
mu_low = 4.08E-10
generations_high = 2 * highest_tau * theta / (4 * mu_low * allele_sum)
years = 2 * highest_tau * theta / (4 * 4.08E-10 * allele_sum * 365)
return(years)
}
return_time_low = function(input, sfs_file, theta_file) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
MLE = max(species_surface$likelihood)
# Task 1: Remove rows with likelihood less than MLE - 3
species_surface <- species_surface[species_surface$likelihood >= MLE - 3, ]
# Task 2: Get the highest nu value from the remaining rows
lowest_tau <- min(species_surface$tau)
# Read the contents of the file into a variable
sfs_lines <- readLines(sfs_file)
# Extract the second line and split it into individual values
sfs_line <- sfs_lines[2]
sfs_vector <- as.numeric(unlist(strsplit(sfs_line, " ")))
allele_sum = sum(sfs_vector)
# Read the contents of the file into a variable
theta_lines <- readLines(theta_file)
# Extract the fifth line
theta_line <- theta_lines[5]
theta <- as.numeric(regmatches(theta_line, regexpr("\\d+\\.\\d+", theta_line)))
mu_low = 4.08E-10
generations_high = 2 * lowest_tau * theta / (4 * mu_low * allele_sum)
years = 2 * lowest_tau * theta / (4 * 4.08E-10 * allele_sum * 365)
return(years)
}
return_time_mle = function(input, sfs_file, theta_file) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
species_surface = species_surface[order(species_surface$likelihood, decreasing=TRUE), ]
mle_tau = species_surface$tau[i]
# Read the contents of the file into a variable
sfs_lines <- readLines(sfs_file)
# Extract the second line and split it into individual values
sfs_line <- sfs_lines[2]
sfs_vector <- as.numeric(unlist(strsplit(sfs_line, " ")))
allele_sum = sum(sfs_vector)
# Read the contents of the file into a variable
theta_lines <- readLines(theta_file)
# Extract the fifth line
theta_line <- theta_lines[5]
theta <- as.numeric(regmatches(theta_line, regexpr("\\d+\\.\\d+", theta_line)))
mu_low = 4.08E-10
generations_high = 2 * mle_tau * theta / (4 * mu_low * allele_sum)
years = 2 * mle_tau * theta / (4 * 4.08E-10 * allele_sum * 365)
return(years)
}
read_demography_info <- function(filepath) {
# Read the content of the file
file_content <- readLines(filepath)
# Extract the relevant lines
nu <- as.numeric(regmatches(file_content[1], regexpr("\\d+\\.\\d+", file_content[1])))
low_years <- as.numeric(regmatches(file_content[length(file_content)-3], regexpr("\\d+\\.\\d+", file_content[length(file_content)-3])))
low_ancestral_size <- as.numeric(regmatches(file_content[length(file_content)-1], regexpr("\\d+\\.\\d+", file_content[length(file_content)-1])))
# Create a vector with the extracted information
result_vector <- c(nu, low_years, low_ancestral_size)
return(result_vector)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pchisq(274.376417233, 1, lower.tail=FALSE)
update.packages()
HR_DFE_file_list = c(
'../HighRecombinationAnalysis/Alistipes_finegoldii_56071/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Alistipes_onderdonkii_55464/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Alistipes_shahii_62199/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Parabacteroides_distasonis_56985/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Parabacteroides_merdae_56972/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_fragilis_54507/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_cellulosilyticus_58046/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_stercoris_56735/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_thetaiotaomicron_56941/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_caccae_53434/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_vulgatus_57955/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Barnesiella_intestinihominis_62208/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Akkermansia_muciniphila_55290/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Dialister_invisus_61905/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Eubacterium_rectale_56927/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Oscillibacter_sp_60799/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Ruminococcus_bromii_62047/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Ruminococcus_bicirculans_59300/core_0.5_inferred_DFE.txt'
)
HR_dfe_nanc = numeric(18)
HR_gamma_likelihood = numeric(18)
HR_gamma_AIC = numeric(18)
HR_gamma_alpha = numeric(18)
HR_gamma_beta = numeric(18)
HR_neugamma_likelihood = numeric(18)
HR_neugamma_AIC = numeric(18)
HR_neugamma_pneu = numeric(18)
HR_neugamma_alpha = numeric(18)
HR_neugamma_beta = numeric(18)
for (i in 1:length(HR_DFE_file_list)) {
HR_dfe_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
HR_gamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[1]
HR_gamma_AIC[i] = 4 - 2 * gamma_likelihood[i]
HR_gamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[1]
HR_gamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[2]
HR_neugamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[2]
HR_neugamma_AIC[i] = 6 - 2 * neugamma_likelihood[i]
HR_neugamma_pneu[i] = return_DFE_params(HR_DFE_file_list[i])[3]
HR_neugamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[4]
HR_neugamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[5]
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('useful_functions.R')
for (i in 1:length(HR_DFE_file_list)) {
HR_dfe_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
HR_gamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[1]
HR_gamma_AIC[i] = 4 - 2 * gamma_likelihood[i]
HR_gamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[1]
HR_gamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[2]
HR_neugamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[2]
HR_neugamma_AIC[i] = 6 - 2 * neugamma_likelihood[i]
HR_neugamma_pneu[i] = return_DFE_params(HR_DFE_file_list[i])[3]
HR_neugamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[4]
HR_neugamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[5]
}
one_epoch_likelihood = numeric(18)
one_epoch_AIC = numeric(18)
one_epoch_theta = numeric(18)
one_epoch_nanc = numeric(18)
two_epoch_likelihood = numeric(18)
two_epoch_AIC = numeric(18)
two_epoch_nu = numeric(18)
two_epoch_tau = numeric(18)
two_epoch_time = numeric(18)
two_epoch_theta = numeric(18)
two_epoch_nanc = numeric(18)
two_epoch_ncurr = numeric(18)
three_epoch_likelihood = numeric(18)
three_epoch_AIC = numeric(18)
three_epoch_nu_bottleneck = numeric(18)
three_epoch_nu_contemporary = numeric(18)
three_epoch_tau_bottleneck = numeric(18)
three_epoch_tau_contemporary = numeric(18)
three_epoch_time_total = numeric(18)
three_epoch_theta = numeric(18)
three_epoch_nanc = numeric(18)
three_epoch_ncurr = numeric(18)
for (i in 1:length(HR_one_epoch_file_list)) {
one_epoch_likelihood[i] = return_demography_likelihood(HR_one_epoch_file_list[i])
one_epoch_AIC[i] = AIC_from_demography(HR_one_epoch_file_list[i])
one_epoch_theta[i] = theta_from_demography(HR_one_epoch_file_list[i])
one_epoch_nanc[i] = nanc_from_demography(HR_one_epoch_file_list[i])
two_epoch_likelihood[i] = return_demography_likelihood(HR_two_epoch_file_list[i])
two_epoch_AIC[i] = AIC_from_demography(HR_two_epoch_file_list[i])
two_epoch_nu[i] = return_demography_params(HR_two_epoch_file_list[i])[1]
two_epoch_tau[i] = return_demography_params(HR_two_epoch_file_list[i])[2]
two_epoch_time[i] = time_from_demography(HR_two_epoch_file_list[i])
two_epoch_theta[i] = theta_from_demography(HR_two_epoch_file_list[i])
two_epoch_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
two_epoch_ncurr[i] = two_epoch_nu[i] * two_epoch_nanc[i]
three_epoch_likelihood[i] = return_demography_likelihood(HR_three_epoch_file_list[i])
three_epoch_AIC[i] = AIC_from_demography(HR_three_epoch_file_list[i])
three_epoch_nu_bottleneck[i] = return_demography_params(HR_three_epoch_file_list[i])[1]
three_epoch_nu_contemporary[i] = return_demography_params(HR_three_epoch_file_list[i])[2]
three_epoch_tau_bottleneck[i] = return_demography_params(HR_three_epoch_file_list[i])[3]
three_epoch_tau_contemporary[i] = return_demography_params(HR_three_epoch_file_list[i])[4]
three_epoch_time_total[i] = time_from_demography(HR_three_epoch_file_list[i])
three_epoch_theta[i] = theta_from_demography(HR_three_epoch_file_list[i])
three_epoch_nanc[i] = nanc_from_demography(HR_three_epoch_file_list[i])
three_epoch_ncurr[i] = three_epoch_nu_contemporary[i] * three_epoch_nanc[i]
}
HR_DFE_file_list = c(
'../HighRecombinationAnalysis/Alistipes_finegoldii_56071/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Alistipes_onderdonkii_55464/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Alistipes_shahii_62199/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Parabacteroides_distasonis_56985/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Parabacteroides_merdae_56972/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_fragilis_54507/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_cellulosilyticus_58046/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_stercoris_56735/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_thetaiotaomicron_56941/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_caccae_53434/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_vulgatus_57955/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Barnesiella_intestinihominis_62208/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Akkermansia_muciniphila_55290/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Dialister_invisus_61905/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Eubacterium_rectale_56927/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Oscillibacter_sp_60799/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Ruminococcus_bromii_62047/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Ruminococcus_bicirculans_59300/core_0.5_inferred_DFE.txt'
)
HR_dfe_nanc = numeric(18)
HR_gamma_likelihood = numeric(18)
HR_gamma_AIC = numeric(18)
HR_gamma_alpha = numeric(18)
HR_gamma_beta = numeric(18)
HR_neugamma_likelihood = numeric(18)
HR_neugamma_AIC = numeric(18)
HR_neugamma_pneu = numeric(18)
HR_neugamma_alpha = numeric(18)
HR_neugamma_beta = numeric(18)
for (i in 1:length(HR_DFE_file_list)) {
HR_dfe_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
HR_gamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[1]
HR_gamma_AIC[i] = 4 - 2 * gamma_likelihood[i]
HR_gamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[1]
HR_gamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[2]
HR_neugamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[2]
HR_neugamma_AIC[i] = 6 - 2 * neugamma_likelihood[i]
HR_neugamma_pneu[i] = return_DFE_params(HR_DFE_file_list[i])[3]
HR_neugamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[4]
HR_neugamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[5]
}
HR_one_epoch_file_list = c(
'../HighRecombinationAnalysis/Alistipes_finegoldii_56071/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Alistipes_onderdonkii_55464/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Alistipes_shahii_62199/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Parabacteroides_distasonis_56985/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Parabacteroides_merdae_56972/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_fragilis_54507/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_cellulosilyticus_58046/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_stercoris_56735/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_thetaiotaomicron_56941/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_caccae_53434/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_vulgatus_57955/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Barnesiella_intestinihominis_62208/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Akkermansia_muciniphila_55290/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Dialister_invisus_61905/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Eubacterium_rectale_56927/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Oscillibacter_sp_60799/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Ruminococcus_bromii_62047/core_0.5_one_epoch_demography.txt',
'../HighRecombinationAnalysis/Ruminococcus_bicirculans_59300/core_0.5_one_epoch_demography.txt'
)
HR_two_epoch_file_list = c(
'../HighRecombinationAnalysis/Alistipes_finegoldii_56071/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Alistipes_onderdonkii_55464/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Alistipes_shahii_62199/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Parabacteroides_distasonis_56985/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Parabacteroides_merdae_56972/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_fragilis_54507/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_cellulosilyticus_58046/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_stercoris_56735/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_thetaiotaomicron_56941/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_caccae_53434/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_vulgatus_57955/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Barnesiella_intestinihominis_62208/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Akkermansia_muciniphila_55290/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Dialister_invisus_61905/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Eubacterium_rectale_56927/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Oscillibacter_sp_60799/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Ruminococcus_bromii_62047/core_0.5_two_epoch_demography.txt',
'../HighRecombinationAnalysis/Ruminococcus_bicirculans_59300/core_0.5_two_epoch_demography.txt'
)
HR_three_epoch_file_list = c(
'../HighRecombinationAnalysis/Alistipes_finegoldii_56071/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Alistipes_onderdonkii_55464/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Alistipes_shahii_62199/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Parabacteroides_distasonis_56985/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Parabacteroides_merdae_56972/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_fragilis_54507/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_cellulosilyticus_58046/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_stercoris_56735/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_thetaiotaomicron_56941/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_caccae_53434/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Bacteroides_vulgatus_57955/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Barnesiella_intestinihominis_62208/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Akkermansia_muciniphila_55290/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Dialister_invisus_61905/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Eubacterium_rectale_56927/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Oscillibacter_sp_60799/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Ruminococcus_bromii_62047/core_0.5_three_epoch_demography.txt',
'../HighRecombinationAnalysis/Ruminococcus_bicirculans_59300/core_0.5_three_epoch_demography.txt'
)
for (i in 1:length(HR_DFE_file_list)) {
HR_dfe_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
HR_gamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[1]
HR_gamma_AIC[i] = 4 - 2 * gamma_likelihood[i]
HR_gamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[1]
HR_gamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[2]
HR_neugamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[2]
HR_neugamma_AIC[i] = 6 - 2 * neugamma_likelihood[i]
HR_neugamma_pneu[i] = return_DFE_params(HR_DFE_file_list[i])[3]
HR_neugamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[4]
HR_neugamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[5]
}
for (i in 1:length(HR_DFE_file_list)) {
HR_dfe_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
HR_gamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[1]
HR_gamma_AIC[i] = 4 - 2 * HR_gamma_likelihood[i]
HR_gamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[1]
HR_gamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[2]
HR_neugamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[2]
HR_neugamma_AIC[i] = 6 - 2 * HR_neugamma_likelihood[i]
HR_neugamma_pneu[i] = return_DFE_params(HR_DFE_file_list[i])[3]
HR_neugamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[4]
HR_neugamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[5]
}
table_s9 = data.frame(
species=HR_phylogenetic_levels_MIDAS,
HR_dfe_nanc,
HR_gamma_likelihood,
HR_gamma_AIC,
HR_gamma_alpha,
HR_gamma_beta,
HR_neugamma_likelihood,
HR_neugamma_AIC,
HR_neugamma_pneu,
HR_neugamma_alpha,
HR_neugamma_beta
)
HR_phylogenetic_levels = c(
'Alistipes finegoldii',
'Alistipes onderdonkii',
'Alistipes shahii',
'Parabacteroides distasonis',
'Parabacteroides merdae',
'Bacteroides fragilis',
'Bacteroides cellulosilyticus',
'Bacteroides stercoris',
'Bacteroides thetaiotaomicron',
'Bacteroides caccae',
'Bacteroides vulgatus',
'Barnesiella intestinihominis',
'Akkermansia muciniphila',
'Dialister invisus',
'Eubacterium rectale',
'Oscillibacter sp.',
'Ruminococcus bromii',
'Ruminococcus bicirculans'
)
HR_phylogenetic_levels_MIDAS = c(
'Alistipes_finegoldii_56071',
'Alistipes_onderdonkii_55464',
'Alistipes_shahii_62199',
'Parabacteroides_distasonis_56985',
'Parabacteroides_merdae_56972',
'Bacteroides_fragilis_54507',
'Bacteroides_cellulosilyticus_58046',
'Bacteroides_stercoris_56735',
'Bacteroides_thetaiotaomicron_56941',
'Bacteroides_caccae_53434',
'Bacteroides_vulgatus_57955',
'Barnesiella_intestinihominis_62208',
'Akkermansia_muciniphila_55290',
'Dialister_invisus_61905',
'Eubacterium_rectale_56927',
'Oscillibacter_sp_60799',
'Ruminococcus_bromii_62047',
'Ruminococcus_bicirculans_59300'
)
HR_DFE_file_list = c(
'../HighRecombinationAnalysis/Alistipes_finegoldii_56071/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Alistipes_onderdonkii_55464/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Alistipes_shahii_62199/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Parabacteroides_distasonis_56985/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Parabacteroides_merdae_56972/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_fragilis_54507/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_cellulosilyticus_58046/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_stercoris_56735/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_thetaiotaomicron_56941/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_caccae_53434/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Bacteroides_vulgatus_57955/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Barnesiella_intestinihominis_62208/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Akkermansia_muciniphila_55290/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Dialister_invisus_61905/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Eubacterium_rectale_56927/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Oscillibacter_sp_60799/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Ruminococcus_bromii_62047/core_0.5_inferred_DFE.txt',
'../HighRecombinationAnalysis/Ruminococcus_bicirculans_59300/core_0.5_inferred_DFE.txt'
)
HR_dfe_nanc = numeric(18)
HR_gamma_likelihood = numeric(18)
HR_gamma_AIC = numeric(18)
HR_gamma_alpha = numeric(18)
HR_gamma_beta = numeric(18)
HR_neugamma_likelihood = numeric(18)
HR_neugamma_AIC = numeric(18)
HR_neugamma_pneu = numeric(18)
HR_neugamma_alpha = numeric(18)
HR_neugamma_beta = numeric(18)
for (i in 1:length(HR_DFE_file_list)) {
HR_dfe_nanc[i] = nanc_from_demography(HR_two_epoch_file_list[i])
HR_gamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[1]
HR_gamma_AIC[i] = 4 - 2 * HR_gamma_likelihood[i]
HR_gamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[1]
HR_gamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[2]
HR_neugamma_likelihood[i] = return_DFE_likelihood(HR_DFE_file_list[i])[2]
HR_neugamma_AIC[i] = 6 - 2 * HR_neugamma_likelihood[i]
HR_neugamma_pneu[i] = return_DFE_params(HR_DFE_file_list[i])[3]
HR_neugamma_alpha[i] = return_DFE_params(HR_DFE_file_list[i])[4]
HR_neugamma_beta[i] = return_DFE_params(HR_DFE_file_list[i])[5]
}
table_s9 = data.frame(
species=HR_phylogenetic_levels_MIDAS,
HR_dfe_nanc,
HR_gamma_likelihood,
HR_gamma_AIC,
HR_gamma_alpha,
HR_gamma_beta,
HR_neugamma_likelihood,
HR_neugamma_AIC,
HR_neugamma_pneu,
HR_neugamma_alpha,
HR_neugamma_beta
)
table_s9
write.csv(table_s9, '../Supplement/Supplemental_Table_9.csv', row.names = F)
