### Pangenome size
pangenome_size = numeric(27)
pangenome_file_list = c(
'../Analysis/Bacteroidales_bacterium_58650/compute_pangenome_size.log',
'../Analysis/Alistipes_putredinis_61533/compute_pangenome_size.log',
'../Analysis/Alistipes_finegoldii_56071/compute_pangenome_size.log',
'../Analysis/Alistipes_onderdonkii_55464/compute_pangenome_size.log',
'../Analysis/Alistipes_shahii_62199/compute_pangenome_size.log',
'../Analysis/Odoribacter_splanchnicus_62174/compute_pangenome_size.log',
'../Analysis/Parabacteroides_distasonis_56985/compute_pangenome_size.log',
'../Analysis/Parabacteroides_merdae_56972/compute_pangenome_size.log',
'../Analysis/Prevotella_copri_61740/compute_pangenome_size.log',
'../Analysis/Bacteroides_fragilis_54507/compute_pangenome_size.log',
'../Analysis/Bacteroides_cellulosilyticus_58046/compute_pangenome_size.log',
'../Analysis/Bacteroides_stercoris_56735/compute_pangenome_size.log',
'../Analysis/Bacteroides_uniformis_57318/compute_pangenome_size.log',
'../Analysis/Bacteroides_thetaiotaomicron_56941/compute_pangenome_size.log',
'../Analysis/Bacteroides_xylanisolvens_57185/compute_pangenome_size.log',
'../Analysis/Bacteroides_caccae_53434/compute_pangenome_size.log',
'../Analysis/Bacteroides_vulgatus_57955/compute_pangenome_size.log',
'../Analysis/Barnesiella_intestinihominis_62208/compute_pangenome_size.log',
'../Analysis/Akkermansia_muciniphila_55290/compute_pangenome_size.log',
'../Analysis/Dialister_invisus_61905/compute_pangenome_size.log',
'../Analysis/Phascolarctobacterium_sp_59817/compute_pangenome_size.log',
'../Analysis/Eubacterium_eligens_61678/compute_pangenome_size.log',
'../Analysis/Eubacterium_rectale_56927/compute_pangenome_size.log',
'../Analysis/Oscillibacter_sp_60799/compute_pangenome_size.log',
'../Analysis/Ruminococcus_bromii_62047/compute_pangenome_size.log',
'../Analysis/Ruminococcus_bicirculans_59300/compute_pangenome_size.log',
'../Analysis/Faecalibacterium_prausnitzii_57453/compute_pangenome_size.log'
)
for (i in 1:length(pangenome_file_list)) {
pangenome_size[i] = get_pangenome_size(pangenome_file_list[i])
}
pangenome_size_data = data.frame(
species=phylogenetic_levels,
pangenome_size=pangenome_size,
N_curr=N_curr_MLE,
N_anc=N_anc
)
cor_pangenome_size_N_curr = cor(pangenome_size, N_curr_MLE)
plot(pangenome_size, N_curr_MLE)
abline(lm(N_curr_MLE ~ pangenome_size))
text(3000, 2E10, paste("Correlation:", round(cor_pangenome_size_N_curr, 2)), pos = 3)
text(3000, 1.5E10, paste("P-value:", round(cor.test(pangenome_size, N_curr_MLE)$p.value, 2)), pos = 3)
title('No correlation between N_curr and pangenome size')
cor_pangenome_size_N_anc = cor(pangenome_size, N_anc)
plot(pangenome_size, N_anc)
abline(lm(N_anc ~ pangenome_size))
text(3000, 3E7, paste("Correlation:", round(cor_pangenome_size_N_anc, 2)), pos = 3)
text(3000, 2.5E7, paste("P-value:", round(cor.test(pangenome_size, N_anc)$p.value, 2)), pos = 3)
title('No correlation between N_anc and pangenome size')
pangenome_size_regression = lm(N_curr_MLE ~ pangenome_size)
pangenome_size_data_reduced <- pangenome_size_data[-c(5, 17, 20, 24), ]
pangenome_size_regression_reduced = lm(pangenome_size_data_reduced$N_curr ~ pangenome_size_data_reduced$pangenome_size)
pangenome_size_scatter = ggscatter(pangenome_size_data_reduced, x="pangenome_size", y="N_curr", color="species", shape=18, size=4) +
ylab('Estimated current effective population size') +
xlab('Number of core and accessory genes') +
geom_text_repel(aes(label = species, color=species, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="Species")) +
geom_abline(intercept=pangenome_size_regression_reduced$coefficients[1], slope = pangenome_size_regression_reduced$coefficients[2],
color="red",
linetype="dashed", size=1.5) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
pangenome_size_scatter
cor.test(pangenome_size_data_reduced$N_curr, pangenome_size_data_reduced$pangenome_size)
pangenome_size_scatter = ggscatter(pangenome_size_data_reduced, x="pangenome_size", y="N_anc", color="species", shape=18, size=4) +
ylab('Estimated ancestral effective population size') +
xlab('Number of core and accessory genes') +
geom_text_repel(aes(label = species, color=species, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="Species")) +
geom_abline(intercept=lm(pangenome_size_data_reduced$N_anc ~ pangenome_size_data_reduced$pangenome_size)$coefficients[1],
slope = lm(pangenome_size_data_reduced$N_anc ~ pangenome_size_data_reduced$pangenome_size)$coefficients[2],
color="red",
linetype="dashed", size=1.5) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
pangenome_size_scatter
cor.test(pangenome_size_data_reduced$N_anc, pangenome_size_data_reduced$pangenome_size)
species_highlight = c('Bacteroides fragilis', 'Ruminococcus bromii')
typeface = ifelse(demography_df$species %in% species_highlight, 6, 4)
demography_df_highlight = demography_df[demography_df$species %in% species_highlight, ]
options(ggrepel.max.overlaps = Inf)
x_label_text = expression(nu == frac(N[current], N[ancestral]))
demography_scatter = ggscatter(demography_df, x="nu_mle", y="time_mle", color="species", shape=18, size=4) +
ylab('Estimated time in years since most recent demographic event') +
xlab(x_label_text) +
geom_vline(xintercept=1.0, color='red', linewidth=1, linetype='dashed') +
scale_shape_manual(name = "Best-Fit Demographic Model",
labels = c("Three Epoch", "Two Epoch"),
values = c(17, 19)) +
geom_text_repel(aes(label = species, color=species, fontface = 'italic'), size=typeface) +
guides(color=guide_legend(title="Species")) +
#scale_x_log10(limits=c(1e-2, 2e4)) +
#scale_y_log10(limits=c(3e2, 5e6)) +
scale_x_log10() +
scale_y_log10() +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
demography_scatter
design = c(
area(1, 1, 1, 1),
area(1, 2, 1, 2),
area(2, 1, 2, 1),
area(2, 2, 2, 2),
area(1, 3, 2, 6)
)
p9 = plot_best_fit_sfs_3A(b_fragilis_best_fit) + ggtitle('Bacteroides fragilis')
p9_l = plot_likelihood_surface_contour_3C('../Analysis/Bacteroides_fragilis_54507_downsampled_14/core_likelihood_surface.csv')
p30 = plot_best_fit_sfs_3B(r_bromii_best_fit) + ggtitle('Ruminococcus bromii')
p30_l = plot_likelihood_surface_contour_talk('../Analysis/Ruminococcus_bromii_62047_downsampled_14/core_likelihood_surface.csv')
p9 + p9_l + # A. muciniphila
p30 + p30_l + #R. bicirculans
demography_scatter +
plot_layout(design=design)
plot_best_fit_sfs_3A = function(input_data) {
input_data = data.frame(input_data)
colnames(input_data) = c(
'Empirical Synonymous',
'MLE Synonymous',
'Empirical Nonsynonymous',
'MLE Nonsynonymous',
'Species',
'X.axis')
fig = ggplot(melt(input_data, id=c('Species', 'X.axis')), aes(x=X.axis, y=as.numeric(value), fill=variable)) +
geom_bar(position='dodge2', stat='identity') +
labs(x = "", fill = "") +
ylab('Proportion of segregating sites') +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
scale_fill_manual(values=c("blue4", "steelblue3", "goldenrod3", "goldenrod1"), name='Site-frequency-spectra') +
# scale_fill_manual(values=c("#cb181d", "#fb6a4a", "blue4", "steelblue3"), name='Site-frequency-spectra') +
theme(legend.position = c(0.72, 0.75)) +
theme(legend.text=element_text(size=10)) +
theme(plot.title = element_text(face = "italic", size=16)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
return(fig)
}
plot_best_fit_sfs_3A = function(input_data) {
input_data = data.frame(input_data)
colnames(input_data) = c(
'Empirical Synonymous',
'MLE Synonymous',
'Empirical Nonsynonymous',
'MLE Nonsynonymous',
'Species',
'X.axis')
fig = ggplot(melt(input_data, id=c('Species', 'X.axis')), aes(x=X.axis, y=as.numeric(value), fill=variable)) +
geom_bar(position='dodge2', stat='identity') +
labs(x = "", fill = "") +
ylab('Proportion of segregating sites') +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
scale_fill_manual(values=c("blue4", "steelblue3", "goldenrod3", "goldenrod1"), name='Site-frequency-spectra') +
# scale_fill_manual(values=c("#cb181d", "#fb6a4a", "blue4", "steelblue3"), name='Site-frequency-spectra') +
theme(legend.position = c(0.72, 0.75)) +
theme(legend.text=element_text(size=10)) +
theme(plot.title = element_text(face = "italic", size=16)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
return(fig)
}
plot_best_fit_sfs_3B = function(input_data) {
input_data = data.frame(input_data)
colnames(input_data) = c(
'Empirical Synonymous',
'Model Synonymous',
'Empirical Nonsynonymous',
'Model Nonsynonymous',
'Species',
'X.axis')
fig = ggplot(melt(input_data, id=c('Species', 'X.axis')), aes(x=X.axis, y=as.numeric(value), fill=variable)) +
geom_bar(position='dodge2', stat='identity') +
labs(x = "", fill = "") +
xlab('Minor allele frequency') +
ylab('Proportion of segregating sites') +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
scale_fill_manual(values=c("blue4", "steelblue3", "goldenrod3", "goldenrod1")) +
# scale_fill_manual(values=c("#cb181d", "#fb6a4a", "blue4", "steelblue3"), name='Site-frequency-spectra') +
theme(legend.position="none") +
theme(plot.title = element_text(face = "italic", size=16)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
return(fig)
}
demography_df = nu_tau_distribution[1:3]
names(demography_df) = c(
'species',
'nu_mle',
'time_mle'
)
demography_df$species = factor(demography_df$species, levels=phylogenetic_levels)
species_highlight = c('Bacteroides fragilis', 'Ruminococcus bromii')
typeface = ifelse(demography_df$species %in% species_highlight, 6, 4)
demography_df_highlight = demography_df[demography_df$species %in% species_highlight, ]
options(ggrepel.max.overlaps = Inf)
x_label_text = expression(nu == frac(N[current], N[ancestral]))
demography_scatter = ggscatter(demography_df, x="nu_mle", y="time_mle", color="species", shape=18, size=4) +
ylab('Estimated time in years since most recent demographic event') +
xlab(x_label_text) +
geom_vline(xintercept=1.0, color='red', linewidth=1, linetype='dashed') +
scale_shape_manual(name = "Best-Fit Demographic Model",
labels = c("Three Epoch", "Two Epoch"),
values = c(17, 19)) +
geom_text_repel(aes(label = species, color=species, fontface = 'italic'), size=typeface) +
guides(color=guide_legend(title="Species")) +
#scale_x_log10(limits=c(1e-2, 2e4)) +
#scale_y_log10(limits=c(3e2, 5e6)) +
scale_x_log10() +
scale_y_log10() +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
demography_scatter
design = c(
area(1, 1, 1, 1),
area(1, 2, 1, 2),
area(2, 1, 2, 1),
area(2, 2, 2, 2),
area(1, 3, 2, 6)
)
p9 = plot_best_fit_sfs_3A(b_fragilis_best_fit) + ggtitle('Bacteroides fragilis')
p9_l = plot_likelihood_surface_contour_3C('../Analysis/Bacteroides_fragilis_54507_downsampled_14/core_likelihood_surface.csv')
p30 = plot_best_fit_sfs_3B(r_bromii_best_fit) + ggtitle('Ruminococcus bromii')
p30_l = plot_likelihood_surface_contour_talk('../Analysis/Ruminococcus_bromii_62047_downsampled_14/core_likelihood_surface.csv')
p9 + p9_l + # A. muciniphila
p30 + p30_l + #R. bicirculans
demography_scatter +
plot_layout(design=design)
p30_l = plot_likelihood_surface_contour_3D('../Analysis/Ruminococcus_bromii_62047_downsampled_14/core_likelihood_surface.csv')
p9 + p9_l + # A. muciniphila
p30 + p30_l + #R. bicirculans
demography_scatter +
plot_layout(design=design)
plot_best_fit_sfs_3A = function(input_data) {
input_data = data.frame(input_data)
colnames(input_data) = c(
'Empirical Synonymous',
'MLE Synonymous',
'Empirical Nonsynonymous',
'MLE Nonsynonymous',
'Species',
'X.axis')
fig = ggplot(melt(input_data, id=c('Species', 'X.axis')), aes(x=X.axis, y=as.numeric(value), fill=variable)) +
geom_bar(position='dodge2', stat='identity') +
labs(x = "", fill = "") +
ylab('Proportion of segregating sites') +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
scale_fill_manual(values=c("blue4", "steelblue3", "goldenrod3", "goldenrod1"), name='Site-frequency-spectra') +
# scale_fill_manual(values=c("#cb181d", "#fb6a4a", "blue4", "steelblue3"), name='Site-frequency-spectra') +
theme(legend.position = c(0.7, 0.75)) +
theme(legend.text=element_text(size=10)) +
theme(plot.title = element_text(face = "italic", size=16)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
return(fig)
}
p9 = plot_best_fit_sfs_3A(b_fragilis_best_fit) + ggtitle('Bacteroides fragilis')
p9_l = plot_likelihood_surface_contour_3C('../Analysis/Bacteroides_fragilis_54507_downsampled_14/core_likelihood_surface.csv')
p30 = plot_best_fit_sfs_3B(r_bromii_best_fit) + ggtitle('Ruminococcus bromii')
p30_l = plot_likelihood_surface_contour_3D('../Analysis/Ruminococcus_bromii_62047_downsampled_14/core_likelihood_surface.csv')
plot_likelihood_surface_contour_3C = function(input) {
species_surface = read.csv(input, header=TRUE)
names(species_surface) = c('index', 'nu', 'tau', 'likelihood')
unique_nu = unique(species_surface$nu)
unique_tau = unique(species_surface$tau)
Z = matrix(data=NA, nrow=length(unique_nu), ncol=length(unique_tau))
count = 1
for (i in 1:length(unique_nu)) {
for (j in 1:length(unique_tau)) {
Z[i, j] = species_surface$likelihood[count]
if (species_surface$nu[count] != unique_nu[i]) {
print('break')
} else if (species_surface$tau[count] != unique_tau[j]) {
print('break')
}
count = count + 1
}
}
species_surface = species_surface[order(species_surface$likelihood, decreasing=TRUE), ]
best_params = c(species_surface$nu[1], species_surface$tau[1])
print(best_params)
MLE = max(species_surface$likelihood)
species_surface$likelihood = species_surface$likelihood - MLE
color_breakpoints = cut(species_surface$likelihood, c(-Inf, -3, -1, -0.5, 0))
likelihood_surface_title = paste('MLE @ [', str_trunc(toString(best_params[1]), 8, ellipsis=''), sep='')
likelihood_surface_title = paste(likelihood_surface_title, ', ', sep='')
likelihood_surface_title = paste(likelihood_surface_title, str_trunc(toString(best_params[2]), 8, ellipsis=''), sep='')
likelihood_surface_title = paste(likelihood_surface_title, ']', sep='')
xlabel_text = expression(nu == frac(N[current], N[ancestral]))
ylabel_text = expression(tau == frac(generations, 2 * N[ancestral]))
fig = ggplot(species_surface) +
geom_contour_filled(aes(x=nu, y=tau, z=likelihood),
# breaks = c(-Inf, -3, -1, -0.5, 0)) +
breaks = c(0, -0.5, -1, -3, -Inf)) +
scale_fill_brewer(palette = "YlGnBu", direction=1, name='Log Likelihood') +
geom_vline(xintercept=1.0, color='red', linewidth=1, linetype='dashed') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
annotate('point', x=best_params[1], y=best_params[2], color='orange', size=1) +
theme(legend.position = c(0.75, 0.75)) +
theme(legend.text=element_text(size=10)) +
theme(axis.title.x = element_blank()) +
ylab(ylabel_text) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
return(fig)
}
p9 = plot_best_fit_sfs_3A(b_fragilis_best_fit) + ggtitle('Bacteroides fragilis')
p9_l = plot_likelihood_surface_contour_3C('../Analysis/Bacteroides_fragilis_54507_downsampled_14/core_likelihood_surface.csv')
p30 = plot_best_fit_sfs_3B(r_bromii_best_fit) + ggtitle('Ruminococcus bromii')
p30_l = plot_likelihood_surface_contour_3D('../Analysis/Ruminococcus_bromii_62047_downsampled_14/core_likelihood_surface.csv')
p9 + p9_l + # A. muciniphila
p30 + p30_l + #R. bicirculans
demography_scatter +
plot_layout(design=design)
nu_tau_distribution
qchisq(1 - 0.05/351, df=2)
# 95% CI based on chi-squared distribution with two degrees of freedom (Gamma DFE)
qchisq(1 - 0.05/7, df=2)
qchisq(1 - 0.05/351, df=2)
b_fragilis_weakly_deleterious
b_fragilis_moderately_deleterious
b_fragilis_highly_deleterious
b_fragilis_lethal
mean_relative_abundance = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_mean_relative_abundance.txt')
mean_relative_abundance
?read.table
mean_relative_abundance = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_mean_relative_abundance.txt', header=TRUE)
mean_relative_abundance
species_prevalence = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_prevalence.txt'
)
species_prevalence = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_prevalence_filtered.txt'
)
species_prevalence
mean_relative_abundance = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_mean_relative_abundance.txt',
header=TRUE)
mean_relative_abundance
species_prevalence = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_prevalence_filtered.txt',
header=TRUE
)
species_prevalence
?cbin
?cbind
species_prevalence
species_prevalence$species_id = factor(species_prevalence$species_id,
levels=phylogenetic_levels)
species_prevalence
phylogenetic_levels
phylogenetic_levels_MIDAS
species_prevalence
species_prevalence = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_prevalence_filtered.txt',
header=TRUE
)
species_prevalence
species_prevalence$species_id = factor(species_prevalence$species_id,
levels=phylogenetic_levels_MIDAS)
species_prevalence
species_prevalence = species_prevalence[order(species_prevalence$species_id), ]
species_prevalence
row.names(species_prevalence) = NULL
species_prevalence
N_curr
N_curr
N_Curr
N_curr_MLE
cor_N_curr_relative_abundance = cor(N_curr_MLE, mean_relative_abundance$mean_relative_abundance)
plot(mean_relative_abundance$mean_relative_abundance, N_curr_MLE)
abline(lm(N_curr_MLE ~ mean_relative_abundance$mean_relative_abundance))
mean_relative_abundance$species_id
mean_relative_abundance_reduced <- mean_relative_abundance[-c(5, 17, 20, 24), ]
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
N_curr_reduced = pangenome_size_data_reduced$N_curr
mean_relative_abundance = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_mean_relative_abundance.txt',
header=TRUE)
mean_relative_abundance
mean_relative_abundance_reduced <- mean_relative_abundance[-c(5, 17, 20, 24), ]
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance$mean_relative_abundance, N_curr_MLE)
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced)
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced)
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(3000, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between N_curr and mean relative abundance')
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced)
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between N_curr and mean relative abundance',
ylab='Current effective population size',
xlab='Mean relative abundance')
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance)
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between N_curr and mean relative abundance'')
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced,
xlab='',
ylab='')
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between N_curr and mean relative abundance')
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between current effective population size and mean relative abundance')
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$species_prevalence)
plot(species_prevalence_reduced$species_prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
species_prevalence
species_prevalence_reduced <- species_prevalence[-c(5, 17, 20, 24), ]
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$species_prevalence)
plot(species_prevalence_reduced$species_prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$species_prevalence)
species_prevalence = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_prevalence_filtered.txt',
header=TRUE
)
species_prevalence
species_prevalence$species_id = factor(species_prevalence$species_id,
levels=phylogenetic_levels_MIDAS)
species_prevalence = species_prevalence[order(species_prevalence$species_id), ]
row.names(species_prevalence) = NULL
species_prevalence
species_prevalence_reduced <- species_prevalence[-c(5, 17, 20, 24), ]
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$species_prevalence)
N_curr_reduced
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$prevalence)
plot(species_prevalence_reduced$prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$prevalence)
plot(species_prevalence_reduced$prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
abline(lm(N_curr_reduced ~ species_prevalence_reduced$prevalence))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_prevalence, 2)), pos = 3)
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$prevalence)
plot(species_prevalence_reduced$prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
abline(lm(N_curr_reduced ~ species_prevalence_reduced$prevalence))
text(100, 3E7, paste("Correlation:", round(cor_N_curr_prevalence, 2)), pos = 3)
text(100, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, species_prevalence_reduced$prevalence)$p.value, 2)), pos = 3)
title('No correlation between current effective population size and mean relative abundance')
N_curr_reduced = pangenome_size_data_reduced$N_curr
mean_relative_abundance = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_mean_relative_abundance.txt',
header=TRUE)
mean_relative_abundance
mean_relative_abundance_reduced <- mean_relative_abundance[-c(5, 17, 20, 24), ]
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between current effective population size and mean relative abundance')
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$prevalence)
plot(species_prevalence_reduced$prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Species prevalence')
abline(lm(N_curr_reduced ~ species_prevalence_reduced$prevalence))
text(100, 3E7, paste("Correlation:", round(cor_N_curr_prevalence, 2)), pos = 3)
text(100, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, species_prevalence_reduced$prevalence)$p.value, 2)), pos = 3)
title('No correlation between current effective population size and species prevalence')
