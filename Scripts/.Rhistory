'B. caccae',
'B. cellulosilyticus',
'B. fragilis',
'B. ovatus',
'B. stercoris',
'B. thetaiotaomicron',
'B. uniformis',
'B. vulgatus',
'B. xylanisolvens',
'B. intestinihominis',
'D. invisus',
'E. eligens',
'E. rectale',
'F. prausnitzii',
'O. splanchnicus',
'Oscillibacter species',
'P. distasonis',
'P. merdae',
'Phasolarctobacterium species',
'P. copri',
'R. bicirculans',
'R. bromii')
num_qp_samples = c(25, 45, 62, 41, 58,
31, 35, 35, 31,
51, 71, 67, 88, 44,
50, 50, 36, 25,
74, 30, 32, 47, 40,
43, 17, 15, 71, 36)
core_qp_samples_per_species_csv =
'Akkermansia_muciniphila_55200, 25
Alistipes_finegoldii_56071, 45
Alistipes_onderdonkii_55464, 62
Alistipes_putredinis_61533, 41
Alistipes_shahii_62199, 58
Bacteroidales_bacterium_58650, 31
Bacteroides_caccae_53434, 35
Bacteroides_cellulosilyticus, 35
Bacteroides_fragilis_5507, 31
Bacteroides_massiliensis_44749, 13
Bacteroides_ovatus_58035, 51
Bacteroides_stercoris, 71
Bacteroides_thetaiotaomicron_56941, 67
Bacteroides_uniformis_57318, 88
Bacteroides_vulgatus_57955, 44
Bacteroides_xylanisolvens_57185, 50
Barnesiella_intestinihominis_62208, 50
Coprococcus_sp_62244, 10
Dialest_invisus_61905, 36
Eubacterium_eligens_61678, 25
Eubacterium_rectale_56927, 74
Faecalibacterium_prausnitzii_57453, 30
Odoribacter_splanchnicus_62174, 32
Oscillibacter_sp_60799, 47
Parabacteroides_distasonis_56985, 40
Parabacteroides_merdae_56972, 43
Phasolarctobacterium_sp_59817, 17
Prevotella_copri_61740, 15
Ruminococcus_bicirculans_59300, 71
Ruminococcus_bromii_62047, 36
'
qp_samples_per_species = data.frame(species_list, as.numeric(num_qp_samples))
png("../Supplement/Supplemental_Figure_12.png", width = 800, height = 1200)
ggplot(qp_samples_per_species, aes(x = reorder(species_list, num_qp_samples), y = num_qp_samples)) +  geom_bar(stat='identity', fill='grey') +
theme(legend.position = "none") +
coord_flip() +
xlab('Species') +
ylab('Number of Quasi-phaseable samples') +
ggtitle('Number of Quasi-phaseable samples per species from core genes')  +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position = "none")  +
geom_hline(yintercept=14, linetype="dashed", color = "red") +
theme(axis.text.y=element_text(face="italic")) +
scale_y_continuous(breaks = seq(0, 90, by = 5))
dev.off()
# Supplemental Figure 13
pangenome_size = numeric(27)
pangenome_file_list = c(
'../Analysis/Bacteroidales_bacterium_58650/compute_pangenome_size.log',
'../Analysis/Alistipes_putredinis_61533/compute_pangenome_size.log',
'../Analysis/Alistipes_finegoldii_56071/compute_pangenome_size.log',
'../Analysis/Alistipes_onderdonkii_55464/compute_pangenome_size.log',
'../Analysis/Alistipes_shahii_62199/compute_pangenome_size.log',
'../Analysis/Odoribacter_splanchnicus_62174/compute_pangenome_size.log',
'../Analysis/Parabacteroides_distasonis_56985/compute_pangenome_size.log',
'../Analysis/Parabacteroides_merdae_56972/compute_pangenome_size.log',
'../Analysis/Prevotella_copri_61740/compute_pangenome_size.log',
'../Analysis/Bacteroides_fragilis_54507/compute_pangenome_size.log',
'../Analysis/Bacteroides_cellulosilyticus_58046/compute_pangenome_size.log',
'../Analysis/Bacteroides_stercoris_56735/compute_pangenome_size.log',
'../Analysis/Bacteroides_uniformis_57318/compute_pangenome_size.log',
'../Analysis/Bacteroides_thetaiotaomicron_56941/compute_pangenome_size.log',
'../Analysis/Bacteroides_xylanisolvens_57185/compute_pangenome_size.log',
'../Analysis/Bacteroides_caccae_53434/compute_pangenome_size.log',
'../Analysis/Bacteroides_vulgatus_57955/compute_pangenome_size.log',
'../Analysis/Barnesiella_intestinihominis_62208/compute_pangenome_size.log',
'../Analysis/Akkermansia_muciniphila_55290/compute_pangenome_size.log',
'../Analysis/Dialister_invisus_61905/compute_pangenome_size.log',
'../Analysis/Phascolarctobacterium_sp_59817/compute_pangenome_size.log',
'../Analysis/Eubacterium_eligens_61678/compute_pangenome_size.log',
'../Analysis/Eubacterium_rectale_56927/compute_pangenome_size.log',
'../Analysis/Oscillibacter_sp_60799/compute_pangenome_size.log',
'../Analysis/Ruminococcus_bromii_62047/compute_pangenome_size.log',
'../Analysis/Ruminococcus_bicirculans_59300/compute_pangenome_size.log',
'../Analysis/Faecalibacterium_prausnitzii_57453/compute_pangenome_size.log'
)
for (i in 1:length(pangenome_file_list)) {
pangenome_size[i] = get_pangenome_size(pangenome_file_list[i])
}
pangenome_size_data = data.frame(
species=phylogenetic_levels,
pangenome_size=pangenome_size,
N_curr=N_curr_MLE,
N_anc=N_anc
)
cor_pangenome_size_N_curr = cor(pangenome_size, N_curr_MLE)
plot(pangenome_size, N_curr_MLE)
abline(lm(N_curr_MLE ~ pangenome_size))
text(3000, 2E10, paste("Correlation:", round(cor_pangenome_size_N_curr, 2)), pos = 3)
text(3000, 1.5E10, paste("P-value:", round(cor.test(pangenome_size, N_curr_MLE)$p.value, 2)), pos = 3)
title('No correlation between N_curr and pangenome size')
cor_pangenome_size_N_anc = cor(pangenome_size, N_anc)
plot(pangenome_size, N_anc)
abline(lm(N_anc ~ pangenome_size))
text(3000, 3E7, paste("Correlation:", round(cor_pangenome_size_N_anc, 2)), pos = 3)
text(3000, 2.5E7, paste("P-value:", round(cor.test(pangenome_size, N_anc)$p.value, 2)), pos = 3)
title('No correlation between N_anc and pangenome size')
pangenome_size_regression = lm(N_curr_MLE ~ pangenome_size)
pangenome_size_data_reduced <- pangenome_size_data[-c(5, 17, 20, 24), ]
pangenome_size_regression_reduced = lm(pangenome_size_data_reduced$N_curr ~ pangenome_size_data_reduced$pangenome_size)
pangenome_size_scatter = ggscatter(pangenome_size_data_reduced, x="pangenome_size", y="N_curr", color="species", shape=18, size=4) +
ylab('Estimated current effective population size') +
xlab('Number of core and accessory genes') +
geom_text_repel(aes(label = species, color=species, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="Species")) +
geom_abline(intercept=pangenome_size_regression_reduced$coefficients[1], slope = pangenome_size_regression_reduced$coefficients[2],
color="red",
linetype="dashed", size=1.5) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
pangenome_size_scatter
cor.test(pangenome_size_data_reduced$N_curr, pangenome_size_data_reduced$pangenome_size)
pangenome_size_scatter = ggscatter(pangenome_size_data_reduced, x="pangenome_size", y="N_anc", color="species", shape=18, size=4) +
ylab('Estimated ancestral effective population size') +
xlab('Number of core and accessory genes') +
geom_text_repel(aes(label = species, color=species, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="Species")) +
geom_abline(intercept=lm(pangenome_size_data_reduced$N_anc ~ pangenome_size_data_reduced$pangenome_size)$coefficients[1],
slope = lm(pangenome_size_data_reduced$N_anc ~ pangenome_size_data_reduced$pangenome_size)$coefficients[2],
color="red",
linetype="dashed", size=1.5) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16))
pangenome_size_scatter
cor.test(pangenome_size_data_reduced$N_anc, pangenome_size_data_reduced$pangenome_size)
### Correlation between mean relative abundance and N_curr
N_curr_reduced = pangenome_size_data_reduced$N_curr
mean_relative_abundance = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_mean_relative_abundance.txt',
header=TRUE)
mean_relative_abundance
mean_relative_abundance_reduced <- mean_relative_abundance[-c(5, 17, 20, 24), ]
mean_relative_abundance_reduced = cbind(mean_relative_abundance_reduced, N_curr_reduced
)
relative_abundance_regression = lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance)
cor_N_curr_relative_abundance = cor(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)
plot(mean_relative_abundance_reduced$mean_relative_abundance, N_curr_reduced,
ylab='Current effective population size',
xlab='Mean relative abundance')
abline(lm(N_curr_reduced ~ mean_relative_abundance_reduced$mean_relative_abundance))
text(0.04, 3E7, paste("Correlation:", round(cor_N_curr_relative_abundance, 2)), pos = 3)
text(0.04, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, mean_relative_abundance_reduced$mean_relative_abundance)$p.value, 2)), pos = 3)
title('No correlation between current effective population size and mean relative abundance')
# 1000 x 1000
mean_relative_abundance_scatter = ggscatter(mean_relative_abundance_reduced, x="mean_relative_abundance", y="N_curr_reduced", color="species_id", shape=18, size=4) +
ylab('Estimated current effective population size') +
xlab('Mean relative abundance') +
geom_text_repel(aes(label = species_id, color=species_id, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="Species")) +
geom_abline(intercept=relative_abundance_regression$coefficients[1], slope = relative_abundance_regression$coefficients[2],
color="red",
linetype="dashed", size=1.5) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16)) +
ggtitle('Correlation: 0.13, P-value: 0.54')
png("../Supplement/Supplemental_Figure_13A.png", width = 1200, height = 1200)
mean_relative_abundance_scatter
dev.off()
### Correlation between prevalence and N_curr
species_prevalence = read.table(
'../Analysis/HMP1_2_relative_abundance_prevalence/species_prevalence_filtered.txt',
header=TRUE
)
species_prevalence
species_prevalence$species_id = factor(species_prevalence$species_id,
levels=phylogenetic_levels_MIDAS)
species_prevalence = species_prevalence[order(species_prevalence$species_id), ]
row.names(species_prevalence) = NULL
species_prevalence
species_prevalence_reduced <- species_prevalence[-c(5, 17, 20, 24), ]
species_prevalence_reduced <- species_prevalence[-c(5, 17, 20, 24), ]
species_prevalence_reduced = cbind(species_prevalence_reduced, N_curr_reduced
)
species_prevalence_regression = lm(N_curr_reduced ~ species_prevalence_reduced$prevalence)
cor_N_curr_prevalence = cor(N_curr_reduced, species_prevalence_reduced$prevalence)
plot(species_prevalence_reduced$prevalence, N_curr_reduced,
ylab='Current effective population size',
xlab='Species prevalence')
abline(lm(N_curr_reduced ~ species_prevalence_reduced$prevalence))
text(100, 3E7, paste("Correlation:", round(cor_N_curr_prevalence, 2)), pos = 3)
text(100, 2.5E7, paste("P-value:", round(cor.test(N_curr_reduced, species_prevalence_reduced$prevalence)$p.value, 2)), pos = 3)
title('No correlation between current effective population size and species prevalence')
prevalence_scatter = ggscatter(species_prevalence_reduced, x="prevalence", y="N_curr_reduced", color="species_id", shape=18, size=4) +
ylab('Estimated current effective population size') +
xlab('Species prevalence') +
geom_text_repel(aes(label = species_id, color=species_id, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="Species")) +
geom_abline(intercept=species_prevalence_regression$coefficients[1], slope = species_prevalence_regression$coefficients[2],
color="red",
linetype="dashed", size=1.5) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16)) +
ggtitle('Correlation: -0.08, P-value: 0.72')
png("../Supplement/Supplemental_Figure_13B.png", width = 1200, height = 1200)
prevalence_scatter
dev.off()
# Supplemental Figure 14
accessory_core_demography = data.frame(species=phylogenetic_levels,
core_nu = numeric(27),
core_years = numeric(27),
core_na = numeric(27),
acc_nu = numeric(27),
acc_years = numeric(27),
acc_na = numeric(27))
accessory_two_epoch_file_list = c(
'../Analysis/Bacteroidales_bacterium_58650_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Alistipes_putredinis_61533_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Alistipes_finegoldii_56071_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Alistipes_onderdonkii_55464_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Alistipes_shahii_62199_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Odoribacter_splanchnicus_62174_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Parabacteroides_distasonis_56985_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Parabacteroides_merdae_56972_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Prevotella_copri_61740_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_fragilis_54507_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_cellulosilyticus_58046_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_stercoris_56735_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_uniformis_57318_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_thetaiotaomicron_56941_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_xylanisolvens_57185_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_caccae_53434_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Bacteroides_vulgatus_57955_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Barnesiella_intestinihominis_62208_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Akkermansia_muciniphila_55290_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Dialister_invisus_61905_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Phascolarctobacterium_sp_59817_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Eubacterium_eligens_61678_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Eubacterium_rectale_56927_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Oscillibacter_sp_60799_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Ruminococcus_bromii_62047_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Ruminococcus_bicirculans_59300_downsampled_14/accessory_two_epoch_demography.txt',
'../Analysis/Faecalibacterium_prausnitzii_57453_downsampled_14/accessory_two_epoch_demography.txt'
)
for (i in 1:length(two_epoch_file_list)) {
accessory_core_demography[i, 2:4] = read_demography_info(two_epoch_file_list[i])
accessory_core_demography[i, 5:7] = read_demography_info(accessory_two_epoch_file_list[i])
}
colnames(accessory_core_demography) = c('Species',
'Core, Nu',
'Core, Years',
'Core, N_anc',
'Accessory, Nu',
'Accessory, Years',
'Accessory, N_Anc')
# write.csv(accessory_core_demography, '../Summary/accessory_core_demography_comparison.csv', row.names=FALSE)
accessory_core_demography$`Accessory, N_Anc`
accessory_core_demography[c(7, 13, 14, 17, 18, 22, 23, 27), ]
accessory_core_demography_reduced = accessory_core_demography[c(7, 13, 14, 17, 18, 23, 27), ]
accessory_core_demography_reduced$`Core, N_anc`
accessory_core_demography_reduced$`Accessory, N_Anc`
accessory_core_demography_scatter = ggscatter(accessory_core_demography_reduced, x="Core, N_anc", y="Accessory, N_Anc", color="Species", shape=18, size=4) +
ylab('Estimated current effective population size') +
xlab('species accessory_core_demography') +
geom_text_repel(aes(label = Species, color=Species, fontface = 'italic'), size=3) +
guides(color=guide_legend(title="species")) +
theme(legend.position = 'none') +
guides(color = 'none') +
guides(shape = 'none')  +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16)) +
ylim(0, 3E7) +
xlim(0, 3E7) +
xlab('Ancestral effective population size, Accessory genes') +
ylab('Ancestral effective population size, Core genes') +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed")
png("../Supplement/Supplemental_Figure_14.png", width = 800, height = 800)
accessory_core_demography_scatter
dev.off()
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('red','orange', 'yellow', 'white'), bias=0.1)(100)
col_scheme = c(rep('black', each=1), rep('darkorange', each=4), rep('black', each=4), rep('darkviolet', each=8), rep('black', each=10))
### Figure S6A
png("../Supplement/Supplemental_Figure_6A.png", width = 1200, height = 800)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
dev.off()
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('white', 'yellow', 'orange', 'red'), bias=0.5)(100)
col_scheme = c(rep('black', each=1), rep('darkorange', each=4), rep('black', each=4), rep('darkviolet', each=8), rep('black', each=10))
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_constant_s_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_constant_s_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = 'white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_constant_s_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_constant_s_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('white', 'yellow', 'orange', 'red'), bias=0.4)(100)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('white', 'yellow', 'orange', 'red'), bias=0.6)(100)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('white', 'yellow', 'orange', 'red'), bias=1)(100)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('white', 'yellow', 'orange', 'red'), bias=3)(100)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
color_scale = colorRampPalette(c('white', 'yellow', 'orange', 'red'), bias=2.5)(100)
# 800 x 1200 dimensions of saved image
Heatmap(dfe_comparison_matrix, rect_gp = gpar(type = "none"),
col=color_scale,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if (dfe_comparison_matrix[i, j] > 17.7 && i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white', fontface='italic'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8, col='blue'))
}
else if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col='white'))
grid.text(sprintf("%.1f", dfe_comparison_matrix[i, j]), x, y, gp = gpar(fontsize = 8))
}
},
row_names_side='left',
column_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
row_names_gp = gpar(fontsize = 12,fontface='italic', col=col_scheme),
show_heatmap_legend = F
)
